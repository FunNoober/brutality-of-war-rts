[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[sub_resource type="VisualShaderNodeFresnel" id=1]
default_input_values = [ 2, false, 3, 2.5 ]

[sub_resource type="VisualShaderNodeVectorOp" id=2]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0, 1, 0, 1 )

[sub_resource type="VisualShader" id=4]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible, unshaded;




void vertex() {
// Output:0

}

void fragment() {
// Fresnel:2
	float n_in2p3 = 2.50000;
	float n_out2p0 = pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3);

// Color:5
	vec3 n_out5p0 = vec3(0.000000, 1.000000, 0.000000);
	float n_out5p1 = 1.000000;

// VectorOp:4
	vec3 n_out4p0 = vec3(n_out2p0) * n_out5p0;

// Output:0
	ALBEDO = n_out4p0;
	ALPHA = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -536, 237 )
flags/unshaded = true
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -460, 220 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( -80, 360 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -320, 400 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 0, 5, 0, 4, 1, 2, 0, 0, 1, 4, 0, 0, 0 )

[resource]
shader = SubResource( 4 )
